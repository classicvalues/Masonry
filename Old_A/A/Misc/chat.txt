Please use this following code:

import os
from pyautocad import Autocad, APoint
import csv

# Initialize AutoCAD
acad = Autocad(create_if_not_exists=True)

# File path of the CSV on Windows
csv_file_path = 'C:\\data\\1.csv'

# Directory for output files
output_directory = 'C:\\data\\designs'

# Ensure the output directory exists
os.makedirs(output_directory, exist_ok=True)

# Scaling factor (100000 as requested)
scaling_factor = 100000

# Read the layout from the CSV
def read_layout(file_path):
    with open(file_path, newline='') as csvfile:
        csv_reader = csv.reader(csvfile)
        data = list(csv_reader)
    
    rooms = []
    inner_wall_thickness = None
    outer_wall_thickness = None
    
    for row in data:
        if row[0].startswith('Inner Wall Thickness'):
            inner_wall_thickness = float(row[1])
        elif row[0].startswith('Outer Wall Thickness'):
            outer_wall_thickness = float(row[1])
        else:
            length = float(row[0])
            width = float(row[1])
            name = row[2]
            door = row[3]
            window = row[4]
            rooms.append((length, width, name, door, window))
    
    return rooms, inner_wall_thickness, outer_wall_thickness

# Function to manually draw room walls using AddLine
def draw_room(start_point, length, width, name, dimensions, door, window, inner_wall, outer_wall):
    try:
        # Apply scaling
        length *= scaling_factor
        width *= scaling_factor

        # Define the four corners of the room
        p1 = APoint(start_point[0], start_point[1])
        p2 = APoint(start_point[0] + length, start_point[1])
        p3 = APoint(start_point[0] + length, start_point[1] - width)
        p4 = APoint(start_point[0], start_point[1] - width)

        # Draw the walls as individual lines, outer walls with appropriate thickness
        acad.model.AddLine(p1, p2)  # Top wall
        acad.model.AddLine(p2, p3)  # Right wall
        acad.model.AddLine(p3, p4)  # Bottom wall
        acad.model.AddLine(p4, p1)  # Left wall

        # Center the room name and dimensions
        text_x_offset = length / 2 - (len(name) * scaling_factor) / 4  # Adjusting text to be centered
        text_y_offset = width / 2
        acad.model.AddText(f"{name}", APoint(start_point[0] + text_x_offset, start_point[1] - text_y_offset), 3 * scaling_factor)
        acad.model.AddText(f"{dimensions}", APoint(start_point[0] + text_x_offset, start_point[1] - text_y_offset - 5 * scaling_factor), 2 * scaling_factor)

        # Add the door
        if door == 'door':
            door_start = APoint(start_point[0] + 2 * scaling_factor, start_point[1])
            door_end = APoint(start_point[0] + 5 * scaling_factor, start_point[1])
            acad.model.AddLine(door_start, door_end)  # Door frame

            # Draw door swing (180 degrees)
            acad.model.AddArc(door_start, 3 * scaling_factor, 0, 180)

        # Add the glider window
        if window == 'window':
            window_width = min(0.8 * length, outer_wall * scaling_factor)
            window_start = APoint(start_point[0] + (length - window_width) / 2, start_point[1] - width / 2)
            window_end = APoint(start_point[0] + (length + window_width) / 2, start_point[1] - width / 2)
            acad.model.AddLine(window_start, window_end)  # Glider window
    
    except Exception as e:
        print(f"Error drawing room: {name}. Error: {str(e)}")

# Draw all rooms and save the output to a file in the designs folder
def draw_rooms(file_path, output_directory):
    rooms, inner_wall, outer_wall = read_layout(file_path)
    
    x_offset = 0
    hall_width = 10 * scaling_factor  # Width of the hall separating the two rows of rooms
    mirrored_x_offset = len(rooms) * 50 * scaling_factor + hall_width  # Distance for mirrored rooms on the other side

    # Drawing the rooms
    for i, (length, width, name, door, window) in enumerate(rooms):
        # Coordinates for the first row of rooms
        start_point = (x_offset, 0)
        
        # Draw the room
        draw_room(start_point, length, width, name, f"{length}x{width}", door, window, inner_wall, outer_wall)
        
        # Coordinates for the mirrored room on the opposite side of the hall
        mirrored_start_point = (x_offset, -width - hall_width)
        
        # Draw the mirrored room
        draw_room(mirrored_start_point, length, width, name, f"{length}x{width}", door, window, inner_wall, outer_wall)

        # Update x_offset for the next room
        x_offset += (length + 5) * scaling_factor  # Add some spacing between rooms

    # Save the drawing to the designs folder
    output_file = os.path.join(output_directory, "layout.dwg")
    acad.doc.SaveAs(output_file)
    print(f"Drawing saved to: {output_file}")

# Call the function to draw rooms and save the output
draw_rooms(csv_file_path, output_directory)


and make sure there is only one instance of room name and dimension, and that the arc for the door is a partial circle, and that the door is set open at 45 degrees. Here are the instuctions from another ChatGPT instance:

Drawing and Dimensioning the Average Door
Draw the Door Frame:

Use the Rectangle tool (REC command) to draw the door frame.
Typical dimensions: Width = 36 inches (3 feet). You donâ€™t need to worry about height for a 2D plan.
Command Example:
plaintext
Copy code
Command: REC
Specify first corner: [Point]
Specify other corner: [Point] (Width: 36")
Draw the Door Swing (Optional):

Use the Arc tool (ARC command) to indicate the door swing if needed.
Command Example:
plaintext
Copy code
Command: ARC
Specify start point: [Point]
Specify second point: [Point]
Specify end point: [Point]
Add Dimensions:

Use the Dimension tool (DIMLINEAR command) to show the width of the door.
Command Example:
plaintext
Copy code
Command: DIMLINEAR
Specify first extension line origin: [Point]
Specify second extension line origin: [Point]
Specify dimension line location: [Point]
Place the dimension line outside the door frame to clearly show the width.
2. Drawing and Dimensioning the Wider-than-Normal Door
Draw the Door Frame:

Use the Rectangle tool (REC command) to draw the wider door frame.
Wider-than-normal dimensions: Width = 48 inches (4 feet).
Command Example:
plaintext
Copy code
Command: REC
Specify first corner: [Point]
Specify other corner: [Point] (Width: 48")
Draw the Door Swing (Optional):

Use the Arc tool (ARC command) if you want to show the door swing.
Command Example:
plaintext
Copy code
Command: ARC
Specify start point: [Point]
Specify second point: [Point]
Specify end point: [Point]
Add Dimensions:

Use the Dimension tool (DIMLINEAR command) to show the width of the wider door.
Command Example:
plaintext
Copy code
Command: DIMLINEAR
Specify first extension line origin: [Point]
Specify second extension line origin: [Point]
Specify dimension line location: [Point]
Place the dimension line outside the door frame for clarity.
Additional Tips:
Consistency: Ensure the dimension lines are aligned and clearly readable.
Labeling: Optionally, you can add text annotations to indicate door types or special notes.